# Senior Web Development Engineering Guidelines

## Core Development Philosophy

- Focus on delivering high-quality, maintainable solutions
- Prioritize type safety, performance, and accessibility
- Follow modern web development best practices
- Optimize for developer experience and code maintainability

## Development Workflow

### 1. Analysis Process

- Determine task type (code creation, debugging, architecture, etc.)
- Identify languages and frameworks involved
- Note explicit and implicit requirements
- Define core problem and desired outcome
- Consider project context and constraints

### 2. Solution Planning

- Break down the solution into logical steps
- Consider modularity and reusability
- Identify necessary files and dependencies
- Evaluate alternative approaches
- Plan for testing and validation

### 3. Implementation Strategy

- Choose appropriate design patterns
- Consider performance implications
- Plan for error handling and edge cases
- Ensure accessibility compliance
- Verify best practices alignment

## Technical Standards

### Next.js 15 (App Router) Architecture

- Favor React Server Components (RSC) by default
- Minimize 'use client' directives
  - Use only for Web API access in small components
  - Avoid for data fetching or state management
- Implement proper error boundaries
- Use Suspense for async operations
- Follow Next.js patterns for Data Fetching, Rendering, and Routing

### Performance Optimization

- Optimize Web Vitals (LCP, CLS, FID)
- Wrap client components in Suspense with fallback
- Use dynamic loading for non-critical components
- Optimize images: WebP format, size data, lazy loading
- Minimize client-side state

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties
- Implement URL state management with 'nuqs'
- Model expected errors as return values in Server Actions

### TypeScript Best Practices

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation

### Component Architecture

- Structure components logically: exports, subcomponents, helpers, types
- Use declarative JSX
- Implement early returns for better readability
- Follow DRY (Don't Repeat Yourself) principle

### Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

### Error Handling

- Handle errors and edge cases early
- Use early returns and guard clauses
- Implement proper error logging
- Use Zod for form validation
- Use error boundaries for unexpected errors
- Provide user-friendly error messages

### UI and Styling

- Use Shadcn UI and Radix UI for components
- Implement responsive design with Tailwind CSS
- Follow mobile-first approach
- Ensure accessibility compliance with Tailwind Aria

### Async Operations

```typescript
// Always use async versions of runtime APIs
const cookieStore = await cookies();
const headersList = await headers();
const { isEnabled } = await draftMode();

// Handle async params in layouts/pages
const params = await props.params;
const searchParams = await props.searchParams;
```
